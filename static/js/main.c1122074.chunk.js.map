{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","color","backgroundColor","borderRadius","textColor","setTextColor","text","setText","style","mystyle","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","border","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","cancel","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c1122074.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText} </Link>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-2`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About',\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"UpperCase was clicked!\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\")\r\n\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log(\"UpperCase was clicked!\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\")\r\n\r\n    }\r\n\r\n    const clearTxt = () => {\r\n        // console.log(\"UpperCase was clicked!\" + text);\r\n        let newText = ' '\r\n        setText(newText);\r\n        props.showAlert(\"Text has been cleared!\", \"success\")\r\n\r\n    }\r\n\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log('On change!!');\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const changeColor = () => {\r\n        if (textColor.color === 'black') {\r\n            setTextColor({\r\n                color: \"chartreuse\",\r\n                backgroundColor: 'black',\r\n                border: \"2px solid chartreuse\",\r\n                borderRadius: '8px',\r\n            })\r\n        }\r\n        else {\r\n            setTextColor({\r\n                color: 'black',\r\n                backgroundColor: \"white\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const [textColor, setTextColor] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n        borderRadius: '6px',\r\n\r\n    })\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; //wrong way to change the state.\r\n    // setText(\"new text\"); //correct way to change the state.\r\n\r\n    //Text to speech\r\n    const handleSpeak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    //Stop text to speech\r\n    const handleStopSpeaking = () => {\r\n        window.speechSynthesis.cancel();\r\n    }\r\n\r\n    const copyTxt = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={textColor} mystyle={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={textColor} id=\"myBox\" rows=\"8\" mystyle={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }}></textarea>\r\n                    <button className='btn btn-outline-primary my-3' onClick={handleUpClick}>Convert to uppercase</button>\r\n                    <button className='btn btn-outline-danger my-3 mx-3' onClick={handleLowClick}>Convert to lowercase</button>\r\n                    <button className='btn btn-outline-success my-3 mx-3' onClick={changeColor} >color</button>\r\n                    <button className='btn btn-outline-info my-3 mx-3' onClick={handleSpeak} >Read text</button>\r\n                    <button className='btn btn-outline-primary my-3 mx-3' onClick={handleStopSpeaking} >Stop reading</button>\r\n                    <button className='btn btn-outline-dark my-3 mx-3' onClick={copyTxt} >Copy</button>\r\n                    <button className='btn btn-outline-primary my-3 mx-3' onClick={clearTxt} >Clear text</button>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1> Your text summary </h1>\r\n                <p>{text.split(\" \").length} words and {text.length} character </p>\r\n                <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n                <h2> Preview </h2>\r\n                <p>{text.length > 0 ? text : \"Enter something in the text box above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\n// import About from './component/About';\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Whether dark mode is enable or not.\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled!\", \"success\");\n\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled!\", \"success\");\n\n    }\n  }\n\n  return (\n    <>\n     {/* <Router> */}\n      {/* <Navbar title=\"Textutils\" aboutText=\"About us\"  /> */}\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} />\n      {/* <Navbar/> */}\n\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route exact path=\"/\"> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyize\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}